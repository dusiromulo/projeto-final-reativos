#include "/home/terra/TerraNG/terra/TerraNet.defs"

#define MSG_TYPE_SETUP 0
#define MSG_SETUP_PARENT 1
#define MSG_SETUP_CHILD 2
#define MSG_SETUP_FINISH 3
#define MSG_REQ_TEMP 4
#define MSG_REQ_CHILD_TEMP 5
#define MSG_SEND_TEMP 6
#define MSG_SEND_PARENT_TEMP 7

pktype myMsg from radioMsg with
	var ubyte[4] d8;
	var ushort[4] d16;
	var ulong[2]  d32;
end

var ushort thisParent = 0;
var ushort currentTemp = 0;
var ushort thisID = getNodeId();

var ushort parentControl = 0;
var ushort lastConfigNode = 0;
var ushort lastTempNodeRequest = 0;
var ushort lastTempIndexRequest = 0;
var ushort hasConfigured = 0;

var ushort childsSize = 0;
var ushort currentSum = 0;
var ushort currentChildIndex = 0;
var ushort[4] childs;

if thisID == 11 then
	thisParent = 1;
else
	var myMsg receivedSetupMsg;
	receivedSetupMsg = await RECEIVE(MSG_TYPE_SETUP);
	thisParent = receivedSetupMsg.source;
end

var myMsg sendSetupMsg;
sendSetupMsg.type = MSG_TYPE_SETUP;
sendSetupMsg.target = BROADCAST;
sendSetupMsg.source = thisID;

emit SEND(sendSetupMsg);
await SEND_DONE;
await 10ms;

par/or do
	loop do
		var myMsg receivedMsg;
		receivedMsg = await RECEIVE;
		
		qPut(receivedMsg);
	end
with
	var ubyte flag = 1;
	loop do
	
		if flag == 0 then
			break;
		end
		
		await Q_READY;
		
		loop do
		
			if flag == 0 then
				break;
			end
			
			if qSize() > 0 then
			
				var myMsg queueMsg;
				qGet(queueMsg);
				
				if queueMsg.type == MSG_SETUP_PARENT then
				
					if thisID == queueMsg.d8[0] then
					
						if hasConfigured == 0 then
							hasConfigured = 1;
							// guardar valor dos filhos
							emit LED0(ON);
							childsSize = queueMsg.d8[1];
	
							childs[0] = queueMsg.d16[0];
							childs[1] = queueMsg.d16[1];
							childs[2] = queueMsg.d16[2];
							childs[3] = queueMsg.d16[3];
						
							queueMsg.d16[0] = thisID;
							queueMsg.d16[1] = 0;
							queueMsg.d16[2] = 0;
							queueMsg.d16[3] = 0;
							queueMsg.type = MSG_SETUP_CHILD;
						
							loop childIndex, childsSize do
								queueMsg.target = childs[childIndex];
		
								emit SEND(queueMsg);
								await SEND_DONE;
								await 50ms;
							end
						end
						
					else/if queueMsg.d8[0] != lastConfigNode then
					
						// passa adiante se nao já não foi passado antes
						lastConfigNode = queueMsg.d8[0];
						queueMsg.source = thisID;
						queueMsg.target = BROADCAST;
						emit SEND(queueMsg);
						await SEND_DONE;
						
					end
					
				else/if queueMsg.type == MSG_SETUP_FINISH then
				
					queueMsg.target = BROADCAST;
					emit LED0(OFF);
	
					emit SEND(queueMsg);
					await SEND_DONE;
					flag = 0;
					break;
					
				else/if queueMsg.type == MSG_SETUP_CHILD then
				
					if hasConfigured == 0 then
						hasConfigured = 1;
						parentControl = queueMsg.d16[0];
						emit LED0(ON);
					end
					
				end
				
			else
			
				break;
				
			end
			
			await 100ms;
		end
	end
end

qClear();

/////////
///////// Muda o estado da aplicação
/////////

emit REQ_TEMP();
currentTemp = await TEMP;

par do
	loop do
		var myMsg receivedTempRequest;
		receivedTempRequest = await RECEIVE;
	
		qPut(receivedTempRequest);
	end
with
	var ulong lastTempReq = getTime() - 3000;
	loop do
		if getTime() - lastTempReq >= 3000 then
			emit REQ_TEMP();
			currentTemp = await TEMP;
			lastTempReq = getTime();
		end
		await 10ms;
	end
with
	loop do
		await Q_READY;
		loop do
			if qSize() > 0 then
				var myMsg queueMsg;
				qGet(queueMsg);
				
				if queueMsg.type == MSG_REQ_TEMP then
					
					if 	lastTempNodeRequest != queueMsg.d8[0] or
						lastTempIndexRequest != queueMsg.d8[1] then
							// se ainda n processou o index
							lastTempNodeRequest = queueMsg.d8[0];
							lastTempIndexRequest = queueMsg.d8[1];
							
							if queueMsg.d8[0] != thisID then
								queueMsg.target = BROADCAST;
					
								emit SEND(queueMsg);
								await SEND_DONE;
							else
								emit LED1(ON);
								
								loop childIndex, childsSize do
									// enviar msg de req de temp para cada um dos filhos
				
									var myMsg msgReqTemp;
									msgReqTemp.type = MSG_REQ_CHILD_TEMP;
									msgReqTemp.target = childs[childIndex];

									emit SEND(msgReqTemp);
									await SEND_DONE;
									await 50ms;
								end
							end
					end
					
				else/if queueMsg.type == MSG_SEND_PARENT_TEMP then
				
					currentSum = currentSum + queueMsg.d16[0];
					inc currentChildIndex;
		
					if currentChildIndex == childsSize then
						var myMsg msgSendTemp;
						msgSendTemp.type = MSG_SEND_TEMP;
						msgSendTemp.source = thisID;
						msgSendTemp.target = thisParent;
						msgSendTemp.d16[0] = (currentTemp + currentSum)/(childsSize+1);
						
						currentChildIndex = 0;
						currentSum = 0;
						emit SEND(msgSendTemp);
						await SEND_DONE;
						emit LED1(OFF);
						
						currentChildIndex = 0;
						currentSum = 0;
					end
					
				else/if queueMsg.type == MSG_REQ_CHILD_TEMP then
					var ushort timeWaiting = random() % 100 + 50;
					await (timeWaiting)ms;
					
					var myMsg msgSendParentTemp;
					msgSendParentTemp.type = MSG_SEND_PARENT_TEMP;
					msgSendParentTemp.target = parentControl;
					msgSendParentTemp.d16[0] = currentTemp;
					emit LED0(TOGGLE);
		
					emit SEND(msgSendParentTemp);
					await SEND_DONE;
					
				else/if queueMsg.type == MSG_SEND_TEMP then
					
					emit LED0(TOGGLE);
					queueMsg.target = thisParent;
		
					emit SEND(queueMsg);
					await SEND_DONE;
					
				end
						
			else
				break;
			end
			await 100ms;
		end
	end
end